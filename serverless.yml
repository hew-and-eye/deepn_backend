service: DEEPN

provider:
  name: aws
  runtime: python3.8
  stage: ${opt:stage, 'dev'}
  profile: ${opt:profile, 'personal'}
  region: eu-central-1
  timeout: 6
  memorySize: 256
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:GetItem
        - dynamodb:UpdateItem
        - dynamodb:Query
        - dynamodb:DeleteItem
        - dynamodb:BatchWriteItem
        - dynamodb:BatchGetItem
        - dynamodb:Scan
      Resource:
        - arn:aws:dynamodb:${self:provider.region}:#{AWS::AccountId}:table/DEEPN_USERS*
        - arn:aws:dynamodb:${self:provider.region}:#{AWS::AccountId}:table/DEEPN_TASKS*
        - arn:aws:dynamodb:${self:provider.region}:#{AWS::AccountId}:table/DEEPN_ACCESS_RIGHTS*
        - arn:aws:dynamodb:${self:provider.region}:#{AWS::AccountId}:table/DEEPN_ACCESS_TOKENS*
    - Effect: Allow
      Action:
        - secretsmanager:GetSecretValue
        - secretsmanager:UpdateSecret
      Resource:
        - Fn::Join:
            - ":"
            - - arn:aws:secretsmanager
              - Ref: "AWS::Region"
              - Ref: "AWS::AccountId"
              - secret
              - DEEPN-*
plugins:
  - serverless-manifest-plugin
  - serverless-apigateway-service-proxy
  - serverless-pseudo-parameters
  - serverless-python-requirements
custom:
  whatsappEndpoints:
    dev: "https://qjb9nqwp0i.execute-api.eu-central-1.amazonaws.com/dev/get-qr-code"
  authorizerTtlInSeconds:
    prod: 3600
  authorizer: &authorizer
    name: authorizer
    resultTtlInSeconds: ${self:custom.authorizerTtlInSeconds.${self:provider.stage}, 20}
    identitySource: method.request.header.Authorization
    type: request
functions:
  authorizer:
    handler: functions/authorizer.handler
    package: {} # Fixes problem with per-function deployments caused by requirements plugin
    environment:
      DEEPN: DEEPN
  getUser:
    handler: functions/get_user.handler
    events:
      - http:
          method: get
          integration: lambda
          path: get-user
          cors: true
  findUsers:
    handler: functions/find_users.handler
    package: {} # Fixes problem with per-function deployments caused by requirements plugin
    events:
      - http:
          method: post
          integration: lambda
          path: find-users
          authorizer: *authorizer
          cors: true
  createUser:
    handler: functions/create_user.handler
    package: {} # Fixes problem with per-function deployments caused by requirements plugin
    events:
      - http:
          method: post
          integration: lambda
          path: create-user
          cors: true
  generalTest:
    handler: functions/general_test.handler
    package: {} # Fixes problem with per-function deployments caused by requirements plugin
    events:
      - http:
          method: post
          integration: lambda
          path: general-test
          cors: true

  connectWhatsapp:
    handler: functions/connect_whatsapp.handler
    package: {} # Fixes problem with per-function deployments caused by requirements plugin
    events:
      - http:
          method: post
          integration: lambda
          path: connect-whatsapp
          authorizer: *authorizer
          cors: true
    environment:
      qrEndpoint: "${self:custom.whatsappEndpoints.${self:provider.stage}}"

  comment:
    handler: functions/comment.handler
    package: {} # Fixes problem with per-function deployments caused by requirements plugin
    events:
      - http:
          method: post
          integration: lambda
          path: comment
          authorizer: *authorizer
          cors: true
  createTask:
    handler: functions/create_task.handler
    package: {} # Fixes problem with per-function deployments caused by requirements plugin
    events:
      - http:
          method: post
          integration: lambda
          path: create-task
          authorizer: *authorizer
          cors: true
  shareTask:
    handler: functions/share_task.handler
    package: {} # Fixes problem with per-function deployments caused by requirements plugin
    events:
      - http:
          method: post
          integration: lambda
          path: share-task
          authorizer: *authorizer
          cors: true
  findTasks:
    handler: functions/find_tasks.handler
    package: {} # Fixes problem with per-function deployments caused by requirements plugin
    events:
      - http:
          method: post
          integration: lambda
          path: find-tasks
          authorizer: *authorizer
          cors: true

  createModule:
    handler: functions/create_module.handler
    package: {} # Fixes problem with per-function deployments caused by requirements plugin
    events:
      - http:
          method: post
          integration: lambda
          path: create-module
          authorizer: *authorizer
          cors: true
  getModule:
    handler: functions/get_module.handler
    package: {} # Fixes problem with per-function deployments caused by requirements plugin
    events:
      - http:
          method: post
          integration: lambda
          path: get-module
          authorizer: *authorizer
          cors: true
  findModules:
    handler: functions/find_modules.handler
    package: {} # Fixes problem with per-function deployments caused by requirements plugin
    events:
      - http:
          method: post
          integration: lambda
          path: find-modules
          authorizer: *authorizer
          cors: true
  updateModule:
    handler: functions/update_module.handler
    package: {} # Fixes problem with per-function deployments caused by requirements plugin
    events:
      - http:
          method: post
          integration: lambda
          path: update-module
          authorizer: *authorizer
          cors: true
  getKnowledgeMapData:
    handler: functions/get_knowledge_map_data.handler
    package: {} # Fixes problem with per-function deployments caused by requirements plugin
    events:
      - http:
          method: post
          integration: lambda
          path: get-knowledge-map-data
          authorizer: *authorizer
          cors: true
  getCollection:
    handler: functions/get_collection.handler
    package: {} # Fixes problem with per-function deployments caused by requirements plugin
    events:
      - http:
          method: post
          integration: lambda
          path: get-collection
          authorizer: *authorizer
          cors: true
  updateCollection:
    handler: functions/update_collection.handler
    package: {} # Fixes problem with per-function deployments caused by requirements plugin
    events:
      - http:
          method: post
          integration: lambda
          path: update-collection
          authorizer: *authorizer
          cors: true

  login:
    handler: functions/login.handler
    package: {} # Fixes problem with per-function deployments caused by requirements plugin
    events:
      - http:
          method: post
          integration: lambda
          path: login
          cors: true
    environment:
      DEEPN: DEEPN
resources:
  Resources:
    usersTable: ${file(schemas/usersTable.yml):users}
    accessTokensTable: ${file(schemas/accessTokensTable.yml):access_tokens}
    tasksTable: ${file(schemas/tasksTable.yml):tasks}
    accessRightsTable: ${file(schemas/accessRightsTable.yml):access_rights}
